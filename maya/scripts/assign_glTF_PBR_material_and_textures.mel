/*
* Creates and assigns a new material to a mesh using a supplied glTF PBR glsl shader.
*
* param $objectName         The name of the mesh to assign the new material to, leave this empty to use the current selection.
*
* param $shaderPath         The path to the glTF PBR shader used by the new material.
*
* param $texturePatterns    The regex patterns used to map the texture paths to the glTF PBR shader texture attributes. The
*                           shader texture attributes have the following order:
*                               u_BaseColorTexture, u_MetallicTexture, u_RoughnessTexture, u_OcclusionTexture, u_NormalTexture,
*                               u_EmissiveTexture, u_DiffuseEnvTexture, u_SpecularEnvTexture, u_brdfTexture
*/

global string $glTF_default_texture_patterns[];
global string $glTF_default_shader_path;

global proc assign_glTF_PBR_material_and_textures(
    string $objectNames[],
    string $shaderPath,
    string $texturePatterns[]
)
{
	global string $glTF_default_texture_patterns[];
	global string $glTF_default_shader_path;
	
	string $filePaths[];
	
	if (size($glTF_default_texture_patterns) == 0) {
		$glTF_default_texture_patterns = {
			"base",
			"metallic",
			"roughness",
			"occlusion",
			"normal",
			"emissive",
			"diffuse[\\W\\d_]*env",
			"specular[\\W\\d_]*env",
			"brdf"
		};
	}
	
    // get current selection if $objectNames is not specified
    if (size($objectNames) <= 0)
    {
        string $ls[] = `ls -sl`;
        $objectNames = $ls;
    }

    if (size($objectNames) <= 0)
        error "No node to apply material to specified";
		
	if ($shaderPath == "")
		$shaderPath = $glTF_default_shader_path;

    if ($shaderPath == "" || !`filetest -f $shaderPath`) {
		$filePaths = `fileDialog2 -fm 1 -ff "*.ogsfx" -cap "Select GLTF PBR GLSL shader"`;
		$shaderPath = $filePaths[0];
	}

    if (!`filetest -f $shaderPath`)
        error "Invalid shader path, file not found";

	$glTF_default_shader_path = $shaderPath;
		
    string $attrNames[] = {
        "u_BaseColorTexture",
        "u_MetallicTexture",
        "u_RoughnessTexture",
        "u_OcclusionTexture",
        "u_NormalTexture",
        "u_EmissiveTexture",
        "u_DiffuseEnvTexture",
        "u_SpecularEnvTexture",
        "u_brdfTexture"
    };
	
	if (size($texturePatterns) == 0)
		$texturePatterns = $glTF_default_texture_patterns;

    if (size($texturePatterns) != size($attrNames))
        error "Invalid amount of texture patterns";

    loadPlugin "glslShader.mll";
    source "createAndAssignShader.mel";

    // create new glTF PBR GLSL shader
    string $sh = `shadingNode -asShader GLSLShader`;
    setAttr -type "string" ($sh+".shader") $shaderPath;
    assignCreatedShader "GLSLShader" "" $sh (stringArrayToString($objectNames, " "));

    // request texture paths
    $filePaths = `fileDialog2 -fm 4 -cap "Select all textures"`;
    if (size($filePaths) <= 0)
        return;

    // match texture paths to material texture attributes
    for ($i = 0; $i < size($attrNames); ++$i)
    {
        string $texturePattern = $texturePatterns[$i];

        for ($j = 0; $j < size($filePaths); ++$j)
        {
            string $filePath = $filePaths[$j];
            string $filePathLower = `tolower $filePath`;

            if (`match $texturePattern $filePathLower` != "")
            {
                string $shAttrName = ($sh+"."+$attrNames[$i]);
                string $fileNode = `createRenderNodeCB -as2DTexture "" file ("defaultNavigation -force true -connectToExisting -source %node -destination "+$shAttrName+";")`;
                setAttr -type "string" ($fileNode+".fileTextureName") $filePath;
                break;
            }
        }
    }
}
